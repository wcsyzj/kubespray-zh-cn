# Kubernetes配置目录和系统命名空间。
# 这些是存放所有额外配置的地方，
# Kubernetes通常将它们放在/srv/kubernetes。
# 这会将它们放在一个合理的位置和命名空间中。
# 编辑这些值几乎肯定会破坏某些功能。
kube_config_dir: /etc/kubernetes
kube_script_dir: "{{ bin_dir }}/kubernetes-scripts"
kube_manifest_dir: "{{ kube_config_dir }}/manifests"

# 这是所有证书脚本和证书存放的位置
kube_cert_dir: "{{ kube_config_dir }}/ssl"

# 这是所有bearer tokens存放的位置
kube_token_dir: "{{ kube_config_dir }}/tokens"

kube_api_anonymous_auth: true

## 修改此项以使用其他Kubernetes版本，例如当前的beta版本
kube_version: v1.31.7

# 二进制文件的下载位置。
# 注意：请确保磁盘空间足够（约1G）
local_release_dir: "/tmp/releases"
# 重试失败操作（如推送/下载）的随机偏移量
retry_stagger: 5

# 这是拥有集群安装的用户。
kube_owner: kube

# 这是证书创建脚本更改组的组别
# 证书文件将被更改为此组。这个值基本上不可更改...
kube_cert_group: kube-cert

# 集群日志级别配置
kube_log_level: 2

# 存储凭证的目录
credentials_dir: "{{ inventory_dir }}/credentials"

## 可以激活/停用选定的身份验证方法（oidc，静态令牌认证）
# kube_oidc_auth: false
# kube_token_auth: false


## OpenID Connect 配置变量 https://kubernetes.io/docs/admin/authentication/
## 要使用 OpenID，您需要部署额外的 OpenID 提供程序（例如 Dex, Keycloak, ...）

# kube_oidc_url: https:// ...
# kube_oidc_client_id: kubernetes
## OIDC 的可选设置
# kube_oidc_ca_file: "{{ kube_cert_dir }}/ca.pem"
# kube_oidc_username_claim: sub
# kube_oidc_username_prefix: 'oidc:'
# kube_oidc_groups_claim: groups
# kube_oidc_groups_prefix: 'oidc:'

## 控制 webhook 认证/授权的变量
# kube_webhook_token_auth: false
# kube_webhook_token_auth_url: https://...
# kube_webhook_token_auth_url_skip_tls_verify: false

## 对于 webhook 授权，authorization_modes 必须包含 Webhook
# kube_webhook_authorization: false
# kube_webhook_authorization_url: https://...
# kube_webhook_authorization_url_skip_tls_verify: false

# 选择网络插件（cilium, calico, kube-ovn, weave 或 flannel。使用 cni 表示通用的 cni 插件）
# 也可以设置为 'cloud'，让云提供商设置适当的路由
kube_network_plugin: calico

# 将 multi_networking 设置为 true 将安装 Multus：https://github.com/k8snetworkplumbingwg/multus-cni
kube_network_plugin_multus: false

# Kubernetes 服务的内部网络，未使用的地址块。
kube_service_addresses: 10.233.0.0/18

# 内部网络。使用时，它将从此范围分配 IP 地址给各个 pod。
# 此网络必须在您的网络基础设施中未使用！
kube_pods_subnet: 10.233.64.0/18

# 内部网络节点大小分配（可选）。这是为每个节点分配的 pod IP 地址分配的大小。请注意，每个节点的 pod 数量也受 kubelet_max_pods 变量的限制，默认值为 110。
#
# 示例：
# 最多 64 个节点，每个节点最多 254 或 kubelet_max_pods（两者中较小的一个）个 pod：
#  - kube_pods_subnet: 10.233.64.0/18
#  - kube_network_node_prefix: 24
#  - kubelet_max_pods: 110
#
# 示例：
# 最多 128 个节点，每个节点最多 126 或 kubelet_max_pods（两者中较小的一个）个 pod：
#  - kube_pods_subnet: 10.233.64.0/18
#  - kube_network_node_prefix: 25
#  - kubelet_max_pods: 110
kube_network_node_prefix: 24

# 配置双栈网络（即同时支持 IPv4 和 IPv6）
enable_dual_stack_networks: false

# Kubernetes IPv6 服务的内部网络，未使用的地址块。
# 仅在 enable_dual_stack_networks 设置为 true 时使用
# 提供 4096 个 IPv6 IP
kube_service_addresses_ipv6: fd85:ee78:d8a6:8607::1000/116

# 内部网络。使用时，它将从此范围分配 IPv6 地址给各个 pod。
# 此网络不得已在您的网络基础设施中使用！
# 仅在 enable_dual_stack_networks 设置为 true 时使用。
# 为 256 个节点提供空间，每个节点 254 个 pod。
kube_pods_subnet_ipv6: fd85:ee78:d8a6:8607::1:0000/112

# 为每个节点分配的 IPv6 子网大小。
# 仅在 enable_dual_stack_networks 设置为 true 时使用
# 为每个节点提供 254 个 pod 的空间。
kube_network_node_prefix_ipv6: 120

# API Server 监听的端口。
kube_apiserver_ip: "{{ kube_service_addresses | ansible.utils.ipaddr('net') | ansible.utils.ipaddr(1) | ansible.utils.ipaddr('address') }}"
kube_apiserver_port: 6443  # (https)

# Kube-proxy 代理模式配置。
# 可以是 ipvs, iptables
kube_proxy_mode: ipvs

# 配置 arp_ignore 和 arp_announce 以避免从 kube-ipvs0 接口响应 ARP 查询
# 必须设置为 true 才能使 MetalLB, kube-vip(ARP 启用) 正常工作
kube_proxy_strict_arp: false

# 指定用于 NodePorts 的地址的字符串切片。
# 值可以是有效的 IP 块（例如 1.2.3.0/24, 1.2.3.4/32）。
# 默认的空字符串切片（[]）表示使用所有本地地址。
# kube_proxy_nodeport_addresses_cidr 保留用于旧配置
kube_proxy_nodeport_addresses: >-
  {%- if kube_proxy_nodeport_addresses_cidr is defined -%}
  [{{ kube_proxy_nodeport_addresses_cidr }}]
  {%- else -%}
  []
  {%- endif -%}

# 如果非空，将使用此字符串作为标识而不是实际的主机名
# kube_override_hostname: {{ inventory_hostname }}

## 静态加密 Secret 数据
kube_encrypt_secret_data: false

# 优雅节点关闭（Kubernetes >= 1.21.0），参见 https://kubernetes.io/blog/2021/04/21/graceful-node-shutdown-beta/
# kubelet_shutdown_grace_period 必须大于 kubelet_shutdown_grace_period_critical_pods 以允许
# 非关键 pod 也能优雅终止
# kubelet_shutdown_grace_period: 60s
# kubelet_shutdown_grace_period_critical_pods: 20s

# DNS 配置。
# Kubernetes 集群名称，也将用作 DNS 域
cluster_name: cluster.local
# 通过 /etc/resolv.conf 解析的 DNS 域的子域，用于 hostnet pod
ndots: 2
# dns_timeout: 2
# dns_attempts: 2
# 要添加到默认集群搜索域的自定义搜索域
# searchdomains:
#   - svc.{{ cluster_name }}
#   - default.svc.{{ cluster_name }}
# 移除默认的集群搜索域（``default.svc.{{ dns_domain }}, svc.{{ dns_domain }}``）。
# remove_default_searchdomains: false
# 可以是 coredns, coredns_dual, manual 或 none
dns_mode: coredns
# 如果使用自定义集群 DNS 服务器，请设置手动服务器
# manual_dns_server: 10.x.x.x
# 启用 nodelocal dns 缓存
enable_nodelocaldns: true
enable_nodelocaldns_secondary: false
nodelocaldns_ip: 169.254.25.10
nodelocaldns_health_port: 9254
nodelocaldns_second_health_port: 9256
nodelocaldns_bind_metrics_host_ip: false
nodelocaldns_secondary_skew_seconds: 5
# nodelocaldns_external_zones:
# - zones:
#   - example.com
#   - example.io:1053
#   nameservers:
#   - 1.1.1.1
#   - 2.2.2.2
#   cache: 5
# - zones:
#   - https://mycompany.local:4453
#   nameservers:
#   - 192.168.0.53
#   cache: 0
# - zones:
#   - mydomain.tld
#   nameservers:
#   - 10.233.0.3
#   cache: 5
#   rewrite:
#   - name website.tld website.namespace.svc.cluster.local
# 为 CoreDNS 启用 k8s_external 插件
enable_coredns_k8s_external: false
coredns_k8s_external_zone: k8s_external.local
# 为 kubernetes 插件启用 endpoint_pod_names 选项
enable_coredns_k8s_endpoint_pod_names: false
# 为 coredns（和 nodelocaldns）配置中的上游 DNS 服务器设置转发选项
# dns_upstream_forward_extra_opts:
#   policy: sequential
# 为 coredns kubernetes 插件应用额外选项
# coredns_kubernetes_extra_opts:
#   - 'fallthrough example.local'
# 为 coredns kubernetes 插件转发额外域
# coredns_kubernetes_extra_domains: ''

# 可以是 docker_dns, host_resolvconf 或 none
resolvconf_mode: host_resolvconf
# 部署 netchecker 应用程序以通过 HTTP 服务验证 DNS 解析
deploy_netchecker: false
# Kubernetes skydns 服务的 IP 地址
skydns_server: "{{ kube_service_addresses | ansible.utils.ipaddr('net') | ansible.utils.ipaddr(3) | ansible.utils.ipaddr('address') }}"
skydns_server_secondary: "{{ kube_service_addresses | ansible.utils.ipaddr('net') | ansible.utils.ipaddr(4) | ansible.utils.ipaddr('address') }}"
dns_domain: "{{ cluster_name }}"

## 容器运行时
## docker 表示 docker，crio 表示 cri-o，containerd 表示 containerd。
## 默认：containerd
container_manager: containerd

# 额外的容器运行时
kata_containers_enabled: false

kubeadm_certificate_key: "{{ lookup('password', credentials_dir + '/kubeadm_certificate_key.creds length=64 chars=hexdigits') | lower }}"

# K8s 镜像拉取策略（imagePullPolicy）
k8s_image_pull_policy: IfNotPresent

# Kubernetes 审计日志
kubernetes_audit: false

# 为动态 kubelet 定义 kubelet 配置目录
# kubelet_config_dir:
default_kubelet_config_dir: "{{ kube_config_dir }}/dynamic_kubelet_dir"

# 在运行 Ansible 的主机上创建 kubeconfig 的副本，存放在 {{ inventory_dir }}/artifacts
# kubeconfig_localhost: false
